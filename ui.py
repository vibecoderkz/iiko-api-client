import json


def select_organization(organizations):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞

    Args:
        organizations (list): –°–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π

    Returns:
        str: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ None
    """
    if not organizations:
        return None

    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
    for i, org in enumerate(organizations, 1):
        print(f"{i}. {org.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {org['id']})")

    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é (1-{len(organizations)}): ")
            index = int(choice) - 1
            if 0 <= index < len(organizations):
                return organizations[index]['id']
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


def select_terminal_group(terminal_groups):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞

    Args:
        terminal_groups (list): –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤

    Returns:
        str: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –∏–ª–∏ None
    """
    if not terminal_groups:
        return None

    all_terminals = []
    for org_terminals in terminal_groups:
        items = org_terminals.get('items', [])
        all_terminals.extend(items)

    if not all_terminals:
        print("–ì—Ä—É–ø–ø—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None

    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤:")
    for i, terminal in enumerate(all_terminals, 1):
        name = terminal.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        address = terminal.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
        print(f"{i}. {name} - {address} (ID: {terminal['id']})")

    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤ (1-{len(all_terminals)}): ")
            index = int(choice) - 1
            if 0 <= index < len(all_terminals):
                return all_terminals[index]['id']
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤")
        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


def select_product_from_menu(products):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –º–µ–Ω—é

    Args:
        products (list): –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤

    Returns:
        dict: –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ None
    """
    if not products:
        return None

    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (–ø–µ—Ä–≤—ã–µ 20):")
    display_products = products[:20]

    for i, product in enumerate(display_products, 1):
        price = "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        if product.get('sizePrices') and len(product['sizePrices']) > 0:
            current_price = product['sizePrices'][0].get('price', {}).get('currentPrice')
            if current_price:
                price = f"{current_price} —Ä—É–±."

        print(f"{i}. {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {price}")

    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç (1-{len(display_products)}): ")
            index = int(choice) - 1
            if 0 <= index < len(display_products):
                return display_products[index]
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞")
        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


def display_order_info(order_data):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

    Args:
        order_data (dict): –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
    """
    if not order_data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ")
        return

    print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:")
    print(f"ID: {order_data.get('id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"POS ID: {order_data.get('posId', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"–í–Ω–µ—à–Ω–∏–π –Ω–æ–º–µ—Ä: {order_data.get('externalNumber', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
    print(f"–°—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è: {order_data.get('creationStatus', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

    if order_data.get('errorInfo'):
        error = order_data['errorInfo']
        print(f"‚ùå –û—à–∏–±–∫–∞: {error.get('message', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {error.get('description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")

    order_details = order_data.get('order')
    if order_details:
        print(f"\nüì¶ –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:")
        print(f"–ù–æ–º–µ—Ä: {order_details.get('number', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"–°—Ç–∞—Ç—É—Å: {order_details.get('status', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"–°—É–º–º–∞: {order_details.get('sum', 0)} —Ä—É–±.")
        print(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {order_details.get('whenCreated', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")

        customer = order_details.get('customer')
        if customer:
            print(f"–ö–ª–∏–µ–Ω—Ç: {customer.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        items = order_details.get('items', [])
        if items:
            print(f"–ü–æ–∑–∏—Ü–∏–π –≤ –∑–∞–∫–∞–∑–µ: {len(items)}")
            for i, item in enumerate(items, 1):
                print(f"  {i}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.get('amount', 0)}, –°—Ç–∞—Ç—É—Å: {item.get('status', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")

        payments = order_details.get('payments', [])
        if payments:
            print(f"–ü–ª–∞—Ç–µ–∂–µ–π: {len(payments)}")
            total_paid = sum(p.get('sum', 0) for p in payments)
            print(f"–û–ø–ª–∞—á–µ–Ω–æ: {total_paid} —Ä—É–±.")
    else:
        print("–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è)")


def print_menu_stats(menu_result):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ–Ω—é

    Args:
        menu_result (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω—é
    """
    if menu_result:
        print("\n–ú–µ–Ω—é –ø–æ–ª—É—á–µ–Ω–æ:")
        print(f"–ì—Ä—É–ø–ø: {len(menu_result.get('groups', []))}")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(menu_result.get('productCategories', []))}")
        print(f"–ü—Ä–æ–¥—É–∫—Ç–æ–≤: {len(menu_result.get('products', []))}")
        print(f"–†–∞–∑–º–µ—Ä–æ–≤: {len(menu_result.get('sizes', []))}")
        print(f"–†–µ–≤–∏–∑–∏—è: {menu_result.get('revision', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")


def save_menu_to_file(menu_result, organization_id):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–Ω—é –≤ —Ñ–∞–π–ª

    Args:
        menu_result (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω—é
        organization_id (str): ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏

    Returns:
        str: –ò–º—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ None
    """
    save_choice = input("\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª? (y/n): ")
    if save_choice.lower() == 'y':
        filename = f"menu_{organization_id}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(menu_result, f, indent=2, ensure_ascii=False)
        print(f"–ú–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {filename}")
        return filename
    return None


def select_table(restaurant_sections):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Å—Ç–æ–ª –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∫—Ü–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞

    Args:
        restaurant_sections (list): –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ —Å —Å—Ç–æ–ª–∞–º–∏

    Returns:
        dict: –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–∫—Ü–∏–∏ –∏–ª–∏ None
    """
    if not restaurant_sections:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∫—Ü–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
        return None

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç–æ–ª—ã –∏–∑ –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π
    all_tables = []
    for section in restaurant_sections:
        section_name = section.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        tables = section.get('tables', [])
        for table in tables:
            if not table.get('isDeleted', False):  # –ò—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã
                table_info = {
                    'table': table,
                    'section': section,
                    'section_name': section_name
                }
                all_tables.append(table_info)

    if not all_tables:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤")
        return None

    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª—ã:")
    for i, table_info in enumerate(all_tables, 1):
        table = table_info['table']
        section_name = table_info['section_name']
        table_name = table.get('name', f"–°—Ç–æ–ª {table.get('number', '–±–µ–∑ –Ω–æ–º–µ—Ä–∞')}")
        capacity = table.get('seatingCapacity', 0)
        print(f"{i}. {table_name} (–°–µ–∫—Ü–∏—è: {section_name}, –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {capacity} —á–µ–ª.)")

    while True:
        try:
            choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª (1-{len(all_tables)}): ")
            index = int(choice) - 1
            if 0 <= index < len(all_tables):
                return all_tables[index]
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞")
        except ValueError:
            print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")


def get_customer_input():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞

    Returns:
        tuple: (amount, customer_name)
    """
    amount = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1): ")
    try:
        amount = int(amount) if amount else 1
    except ValueError:
        amount = 1

    customer_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑'): ")
    if not customer_name:
        customer_name = "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑"

    return amount, customer_name